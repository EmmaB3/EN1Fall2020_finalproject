- angle control: user inputs on slider or textbox (possibly click and drag in 
future?) hmmm, tilts image
    - queston: is slider or text input better?
- arm control: choose which arms to use!!!!!!!!!
- press shoot button to shoot, it sets some variable in airtables (??? but how 
- does it know when to reset. maybe we keep track of old number) and robot 
shoots. if target falls, update score and display on hub
    - since we're keeping track of score, we have to keep runnng the same 
    program
- start over button that reuploads code-
- darkmode and high contrast buttons on top- changes ui (for accessiblity and 
just aesthetics)
- theme: space??
    - candy boxes are alien ships
    - why is there gravity? idk shut up nerd
    - stars in background
    - use blue pillowcase as video background

cloud_update(key, val)- updates val in airtables


code notes:
- position 0 is wherever the motor is at startup

- options: 

TODOS (in order of priority):
1. figure out position stuff, finish basic shooting and reset
2. add turning based on slider input
3. make the ui pretty!!!!
    - keep in mind that things should be on left side
4. Add high contrast mode!!!!
5. sensing and keeping score (this would be cool, but not super necessary)
    - get sensor vals, send to airtables



option 1: get everything working in js
    - problem: have to get angle-based positioning to work out
    - ALSO can I get sensor working? unclear

option 2: return to python
    - pressing fire loads code to fire once to spike prime
    - change in slider loads code to go to that angle
    - still probably can't do sensor stuff 

updating score w/out sensor:
    - i click button on remote, it sends val to airtables
    - remote_helpers.js is listening to airtables (use cloud.js as example), 
        updates value on screen when change occurs